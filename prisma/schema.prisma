// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  display_name String
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  groups                     UserOnGroup[]
  recruitments               Recruitment[]
  publicRecruitmentComments  PublicRecruitmentComment[]
  privateRecruitmentComments PrivateRecruitmentComment[]
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users        UserOnGroup[]
  recruitments Recruitment[]
}

model Recruitment {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  group       Group?    @relation(fields: [groupId], references: [id])
  groupId     Int?
  name        String
  description String
  maxMember   Int?
  price       Int
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  publicComments  PublicRecruitmentComment[]
  privateComments PrivateRecruitmentComment[]
}

model UserOnGroup {
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  Int
  isAdmin  Boolean
  joinedAt DateTime @default(now())

  @@id([userId, groupId])
}

model PublicRecruitmentComment {
  id            Int         @id @default(autoincrement())
  comment       String
  recruitment   Recruitment @relation(fields: [reqruitmentId], references: [id])
  reqruitmentId Int
  sender        User        @relation(fields: [senderId], references: [id])
  senderId      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model PrivateRecruitmentComment {
  id            Int         @id @default(autoincrement())
  comment       String
  recruitment   Recruitment @relation(fields: [reqruitmentId], references: [id])
  reqruitmentId Int
  sender        User        @relation(fields: [senderId], references: [id])
  senderId      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
